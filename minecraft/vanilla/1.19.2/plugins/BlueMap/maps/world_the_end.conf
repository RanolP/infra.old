##                          ##
##         BlueMap          ##
##        Map-Config        ##
##                          ##

# The name of this map
# This defines the display name of this map, you can change this at any time.
# Default is the id of this map
name: "world_the_end"

# The path to the save-folder of the world to render.
#  (If this is not defined (commented out or removed), the map will be only registered to the web-server and the web-app
#   but not rendered or loaded by BlueMap. This can be used to display a map that has been rendered somewhere else.)
world: "world_the_end/DIM1"

# A lower value makes the map sorted first (in lists and menus), a higher value makes it sorted later.
# The value needs to be an integer but it can be negative.
# You can change this at any time.
# Default is 0
sorting: 200

# The position on the world where the map will be centered if you open it.
# You can change this at any time.
# This defaults to the world-spawn if you don't set it.
#start-pos: {x:500, z:-820}

# The color of thy sky as a hex-color
# You can change this at any time.
# Default is "#7dabff"
sky-color: "#080010"

# Defines the ambient light-strength that every block is receiving, regardless of the sunlight/blocklight.
# 0 is no ambient light, 1 is fully lighted.
# You can change this at any time.
# Default is 0
ambient-light: 0.6

# Defines the skylight level that the sky of the world is emitting.
# This should always be equivalent to the maximum in-game sky-light for that world!
# If this is a normal overworld dimension, set this to 15 (max).
# If this is a normal nether or end dimension, set this to 0 (min).
# Changing this value requires a re-render of the map.
# Default is 15
world-sky-light: 0

# BlueMap tries to omit all blocks that are below this Y-level and are not visible from above-ground.
# More specific: Block-Faces that have a sunlight/skylight value of 0 are removed.
# This improves the performance of the map on slower devices by a lot, but might cause some blocks to disappear that should normally be visible.
# Changing this value requires a re-render of the map.
# Set to a very high value to remove caves everywhere (e.g. 10000)
# Set to a very low value to remove nothing and render all caves (e.g. -10000)
# Default is 55 (slightly below water-level)
remove-caves-below-y: -10000

# With this value set to true, BlueMap uses the block-light value instead of the sky-light value to "detect caves".
# (See: remove-caves-below-y)
# Changing this value requires a re-render of the map.
# Default is false
cave-detection-uses-block-light: false

# With the below values you can limit the map-render.
# This can be used to ignore the nethers ceiling or render only a certain part of a world.
# Changing this values might require a re-render of the map, already rendered tiles outside the limits will not be deleted.
# Default is no min or max value (= infinite bounds)
#min-x: -4000
#max-x: 4000
#min-z: -4000
#max-z: 4000
#min-y: 50
#max-y: 100

# The minimum "inhabitedTime" value that a chunk must have to be rendered.
# If you set this to a value greater than 0, bluemap will only render chunks that players have visited already.
# Default is 0
min-inhabited-time: 0

# Using this, BlueMap pretends that every Block out of the defined render-bounds is AIR,
# this means you can see the blocks where the world is cut (instead of having a see-through/xray view).
# This has only an effect if you set some render-bounds above.
# Changing this value requires a re-render of the map.
# Default is true
render-edges: true

# Whether the hires-layer will be saved to the storage.
# Disabling this will speed up rendering and reduce the size of the map-files a lot.
# But you will not be able to see the full 3d-models if you zoom in on the map.
# Changing this to false will not remove any existing tiles, existing tiles just won't get updated anymore.
# Changing this to true will require a re-render of the map.
# Default is true
save-hires-layer: true

# This defines the storage-config that will be used to save this map.
# You can find your storage configs next to this config file in the 'storages'-folder.
# Changing this value requires a re-render of the map. The map in the old storage will not be deleted.
# Default is "file"
storage: "file"

# Normally BlueMap detects if a chunk has not yet generated it's light-data and omits rendering those chunks.
# If this is set to true BlueMap will render Chunks even if there is no light-data!
# This can be useful for example if some mod prevents light-data from being saved correctly.
# However, this also has a few drawbacks:
# - For those chunks, every block will always be fully lit
# - Night-mode might not work correctly
# - Caves will always be rendered (ignoring the 'renderCaves' setting)
# Default is false
ignore-missing-light-data: false

# Here you can define any static marker-sets with markers that should be displayed on the map.
# You can change this at any time.
# If you need dynamic markers, you can use any plugin that integrates with BlueMap's API.
# Here is a list: https://bluemap.bluecolored.de/wiki/customization/3rdPartySupport.html
marker-sets: {

    # Here is a marker-set with one of each type of marker as an example.
    # Uncomment (remove the leading #'s) and adapt them to your purpose.
    # See the wiki for more information: https://bluemap.bluecolored.de/wiki/customization/Markers.html
    #example-marker-set: {
    #
    #    label: "Example Marker Set"
    #    toggleable: true
    #    default-hidden: false
    #    markers: {
    #
    #        example-poi-marker: {
    #            type: "poi"
    #            position: { x: 1, y: 64, z: -23 }
    #            label: "Example POI Marker"
    #            icon: "assets/poi.svg"
    #            anchor: { x: 25, y: 45 }
    #            min-distance: 10
    #            max-distance: 10000000
    #        }
    #
    #        example-html-marker: {
    #            type: "html"
    #            position: { x: 1, y: 64, z: -23 }
    #            label: "Example HTML Marker"
    #            html: "<div style='line-height: 2em; font-size: 2em; color: white; transform: translate(-50%, -50%);'>Example HTML Marker</div>"
    #            anchor: { x: 0, y: 0 }
    #            min-distance: 10
    #            max-distance: 10000000
    #        }
    #
    #        example-line-marker: {
    #            type: "line"
    #            position: { x: 1, y: 64, z: -25 }
    #            line: [
    #                { x: 1, y: 64, z: -23 }
    #                { x: 1, y: 64, z: -24 }
    #                { x: 1, y: 64, z: -25 }
    #                { x: 2, y: 64, z: -25 }
    #                { x: 3, y: 64, z: -25 }
    #            ]
    #            label: "Example Line Marker"
    #            detail: "This is a <b>line</b> marker"
    #            link: null
    #            new-tab: false
    #            depth-test: true
    #            line-width: 5
    #            line-color: { r: 255, g: 0, b: 0, a: 1.0 }
    #            min-distance: 10
    #            max-distance: 10000000
    #        }
    #
    #        example-shape-marker: {
    #            type: "shape"
    #            position: { x: 1, y: 64, z: -23 }
    #            shape: [
    #                { x: 1, z: -23 }
    #                { x: 1, z: -24 }
    #                { x: 1, z: -25 }
    #                { x: 2, z: -25 }
    #                { x: 3, z: -25 }
    #            ]
    #            shape-y: 64
    #            label: "Example Shape Marker"
    #            detail: "This is a <b>shape</b> marker"
    #            link: null
    #            new-tab: false
    #            depth-test: true
    #            line-width: 5
    #            line-color: { r: 255, g: 0, b: 0, a: 1.0 }
    #            fill-color: { r: 200, g: 0, b: 0, a: 0.3 }
    #            min-distance: 10
    #            max-distance: 10000000
    #        }
    #
    #        example-extrude-marker: {
    #            type: "extrude"
    #            position: { x: 1, y: 64, z: -23 }
    #            shape: [
    #                { x: 1, z: -23 }
    #                { x: 1, z: -24 }
    #                { x: 1, z: -25 }
    #                { x: 2, z: -25 }
    #                { x: 3, z: -25 }
    #            ]
    #            shape-min-y: 47
    #            shape-max-y: 72
    #            label: "Example Extrude Marker"
    #            detail: "This is a <b>extrude</b> marker"
    #            link: null
    #            new-tab: false
    #            depth-test: true
    #            line-width: 5
    #            line-color: { r: 255, g: 0, b: 0, a: 1.0 }
    #            fill-color: { r: 200, g: 0, b: 0, a: 0.3 }
    #            min-distance: 10
    #            max-distance: 10000000
    #        }
    #
    #    }
    #
    #}

}
